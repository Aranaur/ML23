---
title: "07 - –ê–Ω—Å–∞–º–±–ª—ñ üå≤[üå≤]{.smallest}üå≤[üéÑ]{.smallest}üå≤"
subtitle: "Machine Learning"
author: "–Ü–≥–æ—Ä –ú—ñ—Ä–æ—à–Ω–∏—á–µ–Ω–∫–æ"
date: today
date-format: iso
institute: –ö–ù–ï–£::–Ü–Ü–¢–ï
crossref:
  fig-title: –†–∏—Å.     # (default is "Figure")
  tbl-title: –¢–∞–±.     # (default is "Table")
format:
  revealjs: 
    
    theme: [simple, custom.scss]
    # footer: <https://t.me/araprof>
    logo: img/logo.png
    chalkboard: true
    slide-number: true
    toc: true
    toc-title: –ó–ú–Ü–°–¢
    transition: fade
    mouse-wheel: true
    highlight-style: github
    mainfont: metropolis
    toc-depth: 1
    fig-width: 9
    fig-height: 5
filters:
  - line-highlight
    
knitr: 
  opts_chunk: 
    echo: true
    warnings: false
    message: false
editor_options: 
  chunk_output_type: console
---
```{r, setup, include = F}
library(pacman)
p_load(
  ISLR,
  broom, tidyverse,
  ggplot2, ggthemes, ggforce, ggridges, cowplot, scales, rayshader,
  latex2exp, viridis, extrafont, gridExtra, plotly, ggformula,
  DiagrammeR,
  kableExtra, DT, huxtable,
  data.table, dplyr, snakecase, janitor,
  lubridate, knitr, gbm,
  caret, tidymodels, baguette, rpart, rpart.plot, rattle,
  here, magrittr, parallel, furrr, future.apply, fontawesome
)
# Define colors
red_pink   = "#e64173"
turquoise  = "#20B2AA"
orange     = "#FFA500"
red        = "#fb6107"
blue       = "#3b3b9a"
green      = "#8bb174"
grey_light = "grey70"
grey_mid   = "grey50"
grey_dark  = "grey20"
purple     = "#6A5ACD"
slate      = "#314f4f"
```

# –ê–Ω—Å–∞–º–±–ª–µ–≤—ñ –º–µ—Ç–æ–¥–∏

## –û—Å–Ω–æ–≤–∏

–ó–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± –∑–æ—Å–µ—Ä–µ–¥–∂—É–≤–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ –≤–∏—Å–æ–∫–æ—Ç–æ—á–Ω–æ—ó **–æ–¥–Ω—ñ—î—ó** –º–æ–¥–µ–ª—ñ, [–∞–Ω—Å–∞–º–±–ª–µ–≤—ñ –º–µ—Ç–æ–¥–∏]{.attn} –ø–æ—î–¥–Ω—É—é—Ç—å **–±–∞–≥–∞—Ç–æ** –º–æ–¥–µ–ª–µ–π –Ω–∏–∑—å–∫–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ –≤ *–º–µ—Ç–∞-–º–æ–¥–µ–ª—å*.

. . .

–¢—Ä–∏ –ø–æ—à–∏—Ä–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è **–∫–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –¥–µ—Ä–µ–≤**

1. [Bagging]{.attn}
2. [Random forests]{.attn}
3. [Boosting]{.attn}

. . .

**–ß–æ–º—É?** –•–æ—á–∞ –æ–∫—Ä–µ–º—ñ –¥–µ—Ä–µ–≤–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥—É–∂–µ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∞ –Ω–µ—Ç–æ—á–Ω–∏–º–∏,
–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –¥–µ—Ä–µ–≤ —á–∞—Å—Ç–æ –¥–æ—Å–∏—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–∞ —ñ —Ç–æ—á–Ω–∞.

# Bagging

## Bagging

[Bagging]{.attn} —Å—Ç–≤–æ—Ä—é—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑—Ä–∞–∑–∫–∏ —á–µ—Ä–µ–∑ [–±—É—Ç—Å—Ä–∞–ø]{.hi}.

. . .

[Q]{.qa} –Ø–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –±—É—Ç—Å—Ä–∞–ø?

. . .

[A]{.qa} –û–∫—Ä–µ–º—ñ –¥–µ—Ä–µ–≤–∞ —Ä—ñ—à–µ–Ω—å —Å—Ç—Ä–∞–∂–¥–∞—é—Ç—å –≤—ñ–¥ –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ (*non-robust*).

. . .

–¶—è *–Ω–µ—Ä–æ–±–∞—Å—Ç—ñ—Å—Ç—å* –æ–∑–Ω–∞—á–∞—î, —â–æ –¥–µ—Ä–µ–≤–∞ –º–æ–∂—É—Ç—å *—Å–∏–ª—å–Ω–æ* –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—å –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ —Ç–æ–≥–æ, —è–∫—ñ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∫–ª—é—á–µ–Ω—ñ/–≤–∏–∫–ª—é—á–µ–Ω—ñ.

. . .

–ü–æ —Å—É—Ç—ñ, –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–≥–∞—Ç–æ ¬´—Å–∏–º—É–ª—è—Ü—ñ–π¬ª –∑–∞–º—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö[^31]

[^31]: –ü–∞–º'—è—Ç–∞–π—Ç–µ, —â–æ –¥–∏—Å–ø–µ—Ä—Å—ñ—è –æ—Ü—ñ–Ω—é–≤–∞—á–∞ –∑–∞–∑–≤–∏—á–∞–π –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—É –≤–∏–±—ñ—Ä–∫–∏.

---

## Bagging

[Bootstrap aggregation]{.attn} (bagging) –∑–º–µ–Ω—à—É—î —Ü–µ–π —Ç–∏–ø –º—ñ–Ω–ª–∏–≤–æ—Å—Ç—ñ.

1. –°—Ç–≤–æ—Ä—ñ—Ç—å $B$ –∑—Ä–∞–∑–∫—ñ–≤ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –≤–∏–±—ñ—Ä–∫–∏ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º. 
2. –ù–∞–≤—á—ñ—Ç—å –æ—Ü—ñ–Ω—é–≤–∞—á (–¥–µ—Ä–µ–≤–æ) $\color{#6A5ACD}{\mathop{\hat{f^b}}(x)}$ –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ–∑ –≤–∏–±—ñ—Ä–æ–∫ $B$
3. –û–±'—î–¥–Ω–∞–π—Ç–µ –≤–∞—à—ñ –±—É—Å—Ç—Ä–∞–ø –º–æ–¥–µ–ª—ñ $B$:

$$
\begin{align}
  \color{#e64173}{\mathop{\hat{f}_{\text{bag}}}(x)} = \dfrac{1}{B}\sum_{b=1}^{B}\color{#6A5ACD}{\mathop{\hat{f^b}}(x)}
\end{align}
$$

–¶—è —Å—É–∫—É–ø–Ω–∞ –º–æ–¥–µ–ª—å $\color{#e64173}{\mathop{\hat{f}_{\text{bag}}}(x)}$ —î –≤–∞—à–æ—é –æ—Å—Ç–∞—Ç–æ—á–Ω–æ—é –º–æ–¥–µ–ª–ª—é.

---

## Bagging

–ö–æ–ª–∏ –º–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –±–∞–≥–≥—ñ–Ω–≥ –¥–æ –¥–µ—Ä–µ–≤ —Ä—ñ—à–µ–Ω—å,

- –º–∏ –∑–∞–∑–≤–∏—á–∞–π [–Ω–∞—Ä–æ—â—É—î–º–æ –≥–ª–∏–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞ —ñ –Ω–µ –æ–±—Ä—ñ–∑–∞—î–º–æ]{.hi-pink}

- –¥–ª—è [—Ä–µ–≥—Ä–µ—Å—ñ—ó]{.hi-purple} –º–∏ [—É—Å–µ—Ä–µ–¥–Ω—é—î–º–æ]{.hi-purple} –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö –¥–µ—Ä–µ–≤ $B$

- –¥–ª—è [–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è]{.hi-purple} –º–∏ –º–∞—î–º–æ –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –∞–ª–µ —á–∞—Å—Ç–æ –±–µ—Ä–µ–º–æ [–±—ñ–ª—å—à—ñ—Å—Ç—å]{.hi-purple}

. . .

[–û–∫—Ä–µ–º—ñ]{.hi-pink} (–Ω–µ–æ–±—Ä—ñ–∑–∞–Ω—ñ) –¥–µ—Ä–µ–≤–∞ –±—É–¥—É—Ç—å –¥—É–∂–µ [–≥–Ω—É—á–∫–∏–º–∏]{.hi-pink} —ñ [–∑–∞—à—É–º–ª–µ–Ω–∏–º–∏]{.hi-pink},
<br>–∞–ª–µ —ó—Ö [—É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è]{.hi-purple} –±—É–¥–µ –¥–æ—Å–∏—Ç—å [—Å—Ç–∞–±—ñ–ª—å–Ω–∏–º]{.hi-purple}.

. . .

–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤ $B$, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–µ —î –∫—Ä–∏—Ç–∏—á–Ω–æ—é –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É
<br> $B=100$ –≤ –±—ñ–ª—å—à–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫—ñ–≤ —î –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º.

---

## Out-of-bag error estimation

–ë—î–≥–≥—ñ–Ω–≥ —Ç–∞–∫–æ–∂ –ø—Ä–æ–ø–æ–Ω—É—î –∑—Ä—É—á–Ω–∏–π –º–µ—Ç–æ–¥ –æ—Ü—ñ–Ω–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.

. . .

–î–ª—è –±—É–¥—å-—è–∫–æ—ó –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –≤–∏–±—ñ—Ä–∫–∏ –º–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ ~n/3 —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å.

[Out-of-bag (OOB) error estimation]{.attn} –æ—Ü—ñ–Ω—é—î —á–∞—Å—Ç–æ—Ç—É –ø–æ–º–∏–ª–æ–∫ —Ç–µ—Å—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è **–≤–∏–ø–∞–¥–∫–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö** –∑ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑—Ä–∞–∑–∫–∞.

. . .

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è $i$:

1. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑—Ä–∞–∑–∫–∏ $S_i$, –≤ —è–∫–∏—Ö $i$ –±—É–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ —É –Ω–∞–≤—á–∞–ª—å–Ω—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ
2. –£–∑–∞–≥–∞–ª—å–Ω—é—î—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏ $|S_i|$ $\color{#6A5ACD}{\mathop{\hat{f^b}}(x_i)}$, _–Ω–∞–ø—Ä–∏–∫–ª–∞–¥_, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∞–±–æ –º–æ–¥—É
3. –û–±—á–∏—Å–ª—ñ—Ç—å –ø–æ—Ö–∏–±–∫—É, _–Ω–∞–ø—Ä–∏–∫–ª–∞–¥_, $y_i - \mathop{\hat{f}_{i,\text{OOB},i}}(x_i)$

---

## Out-of-bag error estimation

–ö–æ–ª–∏ $B$ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–µ–ª–∏–∫–∏–π, —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–º–∏–ª–æ–∫ OOB –±—É–¥–µ –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ—é –¥–æ LOOCV (Leave-One-Out Cross-Validation).

. . .

[Q]{.qa} –ù–∞–≤—ñ—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø–æ–º–∏–ª–æ–∫ OOB?

. . .

[A]{.qa} –ö–æ–ª–∏ $B$ —ñ $n$ –≤–µ–ª–∏–∫—ñ, –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî –∑ –±—É–¥—å-—è–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–≥–æ—Ä—Ç–æ–∫ ‚Äî –º–æ–∂–µ —Å—Ç–∞—Ç–∏ –¥–æ—Å–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç–Ω–æ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å.

---

<br>
<br>
<br>
<br>

–û—Å—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—à—É–∫—É –º–æ–¥–µ–ª–µ–π `parsnip`:

>[https://www.tidymodels.org/find/parsnip/](https://www.tidymodels.org/find/parsnip/)

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
:::

::: {.column width="40%"}
```{r, eval = F}
# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '3'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '4'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
- `tree_depth`: –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '5'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
- `tree_depth`: –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
- `min_n`: –º—ñ–Ω. –∫-—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –¥–ª—è –ø–æ–¥—ñ–ª—É
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '6'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
- `tree_depth`: –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
- `min_n`: –º—ñ–Ω. –∫-—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –¥–ª—è –ø–æ–¥—ñ–ª—É
- `class_cost`: –∑–±—ñ–ª—å—à–µ–Ω–Ω—è [–≤–∞—Ä—Ç–æ—Å—Ç—ñ]{.note} –º—ñ–Ω–æ—Ä–Ω–æ–≥–æ –∫–ª–∞—Å—É
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '7'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
- `tree_depth`: –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
- `min_n`: –º—ñ–Ω. –∫-—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –¥–ª—è –ø–æ–¥—ñ–ª—É
- `class_cost`: –∑–±—ñ–ª—å—à–µ–Ω–Ω—è [–≤–∞—Ä—Ç–æ—Å—Ç—ñ]{.note} –º—ñ–Ω–æ—Ä–Ω–æ–≥–æ –∫–ª–∞—Å—É
- `rpart` —î –¥–≤–∏–∂–∫–æ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '9'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
) %>% set_engine(
  engine = "rpart",
  times = 100
)
```
:::

::::

---

## Bagging –≤ R

–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `tidymodels` –ø–ª—é—Å –ø–∞–∫–µ—Ç `baguette` –¥–ª—è –±—î–≥–≥—ñ–Ω–≥—É –¥–µ—Ä–µ–≤.

:::: {.columns}

::: {.column width="60%"}
**–§—É–Ω–∫—Ü—ñ—è:** `bag_tree()`

- "–í–∏–∑–Ω–∞—á–∞—î" –º–æ–¥–µ–ª—å –¥–ª—è `parsnip`.
- `mode`: 'class.', 'reg.', –∞–±–æ unknown
- `cost_complexity`: —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ (`Cp`)
- `tree_depth`: –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
- `min_n`: –º—ñ–Ω. –∫-—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –¥–ª—è –ø–æ–¥—ñ–ª—É
- `class_cost`: –∑–±—ñ–ª—å—à–µ–Ω–Ω—è [–≤–∞—Ä—Ç–æ—Å—Ç—ñ]{.note} –º—ñ–Ω–æ—Ä–Ω–æ–≥–æ –∫–ª–∞—Å—É
- `rpart` —î –¥–≤–∏–∂–∫–æ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
- `times`: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤
:::

::: {.column width="40%"}
```{r}
#| eval: false
#| code-line-numbers: '10'

# Train a bagged tree model
bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
) %>% set_engine(
  engine = "rpart",
  times = 100
)
```
:::

::::

---

## –ü—Ä–∏–∫–ª–∞–¥: Bagging –≤ R

```{r, load-data-heart, include = F, cache = T}
# Read data
heart_df <- read_csv("Heart.csv") %>%
  dplyr::select(-1) %>%
  rename(HeartDisease = AHD) %>%
  clean_names()
# Impute missing values
heart_recipe = recipe(heart_disease ~ ., data = heart_df) %>% 
  step_impute_median(all_predictors() & all_numeric()) %>% 
  step_impute_mode(all_predictors() & all_nominal())
heart_df = heart_recipe %>% prep() %>% juice()
```

:::: {.columns}

::: {.column}
<br>OOB-based error
```{r, ex-bag-oob, cache = T, dependson = "load-data-heart"}
#| code-line-numbers: '11'

# Set the seed
set.seed(12345)
# Train the bagged trees
heart_bag = train(
  heart_disease ~ .,
  data = heart_df,
  method = "treebag",
  nbagg = 100,
  keepX = T,
  trControl = trainControl(
    method = "oob"
  )
)
```
:::

::: {.column}
<br>CV-based error
```{r, ex-bag-cv, eval = F}
#| code-line-numbers: '11,12'

# Set the seed
set.seed(12345)
# Train the bagged trees
heart_bag_cv = train(
  heart_disease ~ .,
  data = heart_df,
  method = "treebag",
  nbagg = 100,
  keepX = T,
  trControl = trainControl(
    method = "cv",
    number = 5
  )
)
```
:::

::::

---

```{r, sim-bag-size, cache = T}
# Set the seed
set.seed(12345)

plan(multisession)
# Train the bagged trees
bag_oob = future_map_dfr(
  .x = 2:300,
  .f = function(n) {
    train(
      heart_disease ~ .,
      data = heart_df,
      method = "treebag",
      nbagg = n,
      keepX = T,
      trControl = trainControl(
        method = "oob"
      )
    )$results$Accuracy %>%
    data.frame(accuracy = ., n_trees = n)
  }
)
# Train the bagged trees
bag_cv <- future_map_dfr(
  .x = 2:300,
  .f = function(n) {
    train(
      heart_disease ~ .,
      data = heart_df,
      method = "treebag",
      nbagg = n,
      keepX = T,
      trControl = trainControl(
        method = "cv",
        number = 5
      )
    )$results$Accuracy %>%
    data.frame(accuracy = ., n_trees = n)
  }
)
```

---

**Bagging —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤**

```{r, plot-bag, echo = F, cache = T}
ggplot(
  data = bind_rows(
    bag_oob %>% mutate(type = "Bagged, OOB"),
    bag_cv %>% mutate(type = "Bagged, CV")
  ),
  aes(x = n_trees, y = accuracy, color = type)
) +
geom_line() +
scale_y_continuous("Accuracy", labels = scales::percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_manual("[Method, Estimate]", values = c(red_pink, purple)) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0.60, 0.90))
```

---

<br>
<br>
<br>
<br>
<br>
–ù–∞ –∂–∞–ª—å, —Ü—è –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è `rpart`/`baguette`/`parsnip`/`yardstick` –Ω–µ –ø—Ä–æ–ø–æ–Ω—É—î ([–Ω–∞—Ä–∞–∑—ñ](https://github.com/tidymodels/baguette/issues/33)) –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ OOB . üòû

---

<br>
<br>
<br>
<br>
<br>
–ú–∏ *–º–æ–∂–µ–º–æ* ["–æ–±–¥—É—Ä–∏—Ç–∏"](https://www.sds.pub/bagged-trees.html) –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—ñ—Å–∏ (`ranger`) —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ OOB –¥–ª—è Bagging –¥–µ—Ä–µ–≤.

–ê–ª–µ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—ñ—Å–∏...

---

<br>
<br>
<br>
<br>
... —ñ –ø–µ—Ä–µ–¥ *—Ü–∏–º*, –¥–∞–≤–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ –≤–ø–ª–∏–≤–æ–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö.

# –í–ø–ª–∏–≤–æ–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö

## –í–ø–ª–∏–≤–æ–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö

–£ —Ç–æ–π —á–∞—Å —è–∫ –∞–Ω—Å–∞–º–±–ª–µ–≤—ñ –º–µ—Ç–æ–¥–∏, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, [–ø–æ–∫—Ä–∞—â—É—é—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è]{.hi}, –≤–æ–Ω–∏ —Ç–∞–∫–æ–∂ –º–∞—é—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—é [–∑–Ω–∏–∂—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–æ–≤–∞–Ω—ñ—Å—Ç—å]{.hi}.

. . .

–ú–∏ –º–æ–∂–µ–º–æ –ø—Ä–æ—ñ–ª—é—Å—Ç—Ä—É–≤–∞—Ç–∏ [–≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö]{.attn}, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∑–º–µ–Ω—à–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ (RSS, Gini, –µ–Ω—Ç—Ä–æ–ø—ñ—è —Ç–æ—â–æ)[^32]

[^32]: –¶—è —ñ–¥–µ—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –Ω–µ –ª–∏—à–µ bagging/–∞–Ω—Å–∞–º–±–ª—ñ–≤, –∞ –π –æ–∫—Ä–µ–º–∏—Ö –¥–µ—Ä–µ–≤.

---

–£ –≤–∏–ø–∞–¥–∫—É `"rpart"` bagged –¥–µ—Ä–µ–≤...

```{r, tidy-bag-0, eval = T, include = F, cache = T}
# Read data
heart_df = read_csv("Heart.csv") %>%
    dplyr::select(-1) %>%
  rename(HeartDisease = AHD) %>%
  clean_names()
```

```{r, tidy-bag-1, eval = T, cache = T, dependson = -1}
# Recipe to clean data (impute NAs)
heart_recipe = recipe(heart_disease ~ ., data = heart_df) %>% 
  step_impute_median(all_predictors() & all_numeric()) %>% 
  step_impute_mode(all_predictors() & all_nominal())
# Define the bagged tree model
heart_bag = bag_tree(
  mode = "classification",
  cost_complexity = 0,
  tree_depth = NULL,
  min_n = 2,
  class_cost = NULL
) %>% set_engine(
  engine = "rpart",
  times = 100
)
# Define workflow
heart_bag_wf = workflow() %>% 
  add_model(heart_bag) %>% 
  add_recipe(heart_recipe)
# Fit/assess with CV
heart_bag_fit = heart_bag_wf %>% fit(heart_df)
```

---

... –æ—Ü—ñ–Ω–µ–Ω–∏–π –æ–±'—î–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–∞—î –∑–º—ñ–Ω–Ω—É –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å.

```{r, tidy-bag-imp, echo = F}
# Variable importance
heart_bag_fit %>% extract_fit_parsnip() %$% fit
```

---

[–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö]{.hi-pink} –∑ –Ω–∞—à–æ—ó bagged tree model.

```{r, ex-var-importance, include = F, cache = T, dependson = "ex-bag-oob"}
# Get importance
imp_df = heart_bag_fit %>% extract_fit_parsnip() %$% fit %>% var_imp()
# Standardize importance
imp_df %<>% mutate(
  importance = value - min(value),
  importance = 100 * importance / max(importance)
)
```

```{r, plot-var-importance, echo = F, dependson = -3}
# Plot importance
ggplot(
  data = imp_df,
  aes(x = reorder(term, -importance), y = importance)
) +
geom_col(fill = red_pink) +
geom_hline(yintercept = 0) +
xlab("Variable") +
ylab("Importance (scaled [0,100])") +
# scale_fill_viridis_c(option = "magma", direction = -1) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(legend.position = "none") +
coord_flip()
```

---

## Bagging

–£ Bagging —î —â–µ –æ–¥–∏–Ω –Ω–µ–¥–æ–ª—ñ–∫...

–Ø–∫—â–æ –æ–¥–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–æ–º—ñ–Ω—É—î –Ω–∞–¥ —ñ–Ω—à–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏, [–¥–µ—Ä–µ–≤–∞ –±—É–¥—É—Ç—å –¥—É–∂–µ –∫–æ—Ä–µ–ª—å–æ–≤–∞–Ω–∏–º–∏]{.hi}.

. . .

–Ø–∫—â–æ –¥–µ—Ä–µ–≤–∞ –¥—É–∂–µ –∫–æ—Ä–µ–ª—å–æ–≤–∞–Ω—ñ, —Ç–æ bagging –≤—Ç—Ä–∞—á–∞—î —Å–≤–æ—é –ø–µ—Ä–µ–≤–∞–≥—É.

. . .

[–†—ñ—à–µ–Ω–Ω—è]{.note} –ú–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑—Ä–æ–±–∏—Ç–∏ –¥–µ—Ä–µ–≤–∞ –º–µ–Ω—à –∫–æ—Ä–µ–ª—å–æ–≤–∞–Ω–∏–º–∏.

# Random forests

## Random forests

[–í–∏–ø–∞–¥–∫–æ–≤—ñ –ª—ñ—Å–∏]{.attn} –ø–æ–∫—Ä–∞—â—É—é—Ç—å bagged trees —à–ª—è—Ö–æ–º *–¥–µ–∫–æ—Ä–µ–ª—è—Ü—ñ—ó* –¥–µ—Ä–µ–≤.

. . .

–©–æ–± –¥–µ–∫–æ—Ä–µ–ª—é–≤–∞—Ç–∏ –¥–µ—Ä–µ–≤–∞, [–≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ª—ñ—Å]{.attn} —Ä–æ–∑–≥–ª—è–¥–∞—î –ª–∏—à–µ [–≤–∏–ø–∞–¥–∫–æ–≤—É –ø—ñ–¥–º–Ω–æ–∂–∏–Ω—É]{.pink} $\color{#e64173}{m\enspace (\approx\sqrt{p})}$ [–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ñ–≤]{.pink} –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑–±–∏—Ç—Ç—è (–¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞).

. . .

–û–±–º–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö, —è–∫—ñ –Ω–∞—à–µ –¥–µ—Ä–µ–≤–æ –±–∞—á–∏—Ç—å –ø—Ä–∏ –∑–∞–¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—ñ:

. . .

- –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –¥–µ—Ä–µ–≤–∞–º –ø–æ—Å—Ç—ñ–π–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–¥–Ω—ñ —ñ —Ç—ñ –∂ –∑–º—ñ–Ω–Ω—ñ,

. . .

- –∑–±—ñ–ª—å—à—É—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å –¥–µ—Ä–µ–≤ —É –Ω–∞—à–æ–º—É –ª—ñ—Å—ñ,

. . .

- –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –∑–º–µ–Ω—à—É—î –¥–∏—Å–ø–µ—Ä—Å—ñ—é –Ω–∞—à–∏—Ö –æ—Ü—ñ–Ω–æ–∫.

. . .

–Ø–∫—â–æ –Ω–∞—à—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –¥—É–∂–µ –∫–æ—Ä–µ–ª—å–æ–≤–∞–Ω—ñ, –º–∏ –º–æ–∂–µ–º–æ –∑–∞—Ö–æ—Ç—ñ—Ç–∏ –∑–º–µ–Ω—à–∏—Ç–∏ $m$.

---

## Random forests

–¢–∞–∫–∏–º —á–∏–Ω–æ–º, –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—ñ—Å–∏ –≤–≤–æ–¥—è—Ç—å *–¥–≤–∞ –≤–∏–º—ñ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤–∞—Ä—ñ–∞—Ü—ñ—ó*

1. *–±—É—Ç—Å—Ä–∞–ø –≤–∏–±—ñ—Ä–∫–∞*

2. $m$ *–≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∏* (–¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è)

–í—Å–µ —ñ–Ω—à–µ –ø—Ä–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ª—ñ—Å–∏ –ø—Ä–∞—Ü—é—î —Ç–∞–∫ —Å–∞–º–æ, —è–∫ —ñ –∑ bagging

---

## Random forests –≤ R

–£ –≤–∞—Å —î –∫—ñ–ª—å–∫–∞ [–≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤](http://topepo.github.io/caret/train-models-by-tag.html#Random_Forest) –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ª—ñ—Å—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`.
<br>_–ù–∞–ø—Ä–∏–∫–ª–∞–¥_, `ranger`, `randomForest`, `spark`.

`rand_forest()` –æ—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑ —Ü–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ —á–µ—Ä–µ–∑ —ó—Ö *–¥–≤–∏–≥—É–Ω–∏*.

. . .

- –ú–µ—Ö–∞–Ω—ñ–∑–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî ¬´ranger¬ª (–ø–∞–∫–µ—Ç [`ranger`](https://cran.r-project.org/web/packages/ranger/index.html)).

. . .

- –ê—Ä–≥—É–º–µ–Ω—Ç `mtry` –¥–∞—î $m$, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ñ–≤ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—ñ.

. . .

–í–∏ –≤–∂–µ –±–∞—á–∏–ª–∏ —ñ–Ω—à—ñ –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è `ranger`:

- `trees` –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤ —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –ª—ñ—Å—ñ
- `min_n` –º—ñ–Ω. –∫-—Ç—å —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`
:::

::: {.column}
```{r, ex-tidy-ranger, cache = T}
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '3'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
- –¢—Ä–∏ –∑–º—ñ–Ω–Ω—ñ –Ω–∞ –ø–æ–¥—ñ–ª
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '4'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
- –¢—Ä–∏ –∑–º—ñ–Ω–Ω—ñ –Ω–∞ –ø–æ–¥—ñ–ª
- 100 –¥–µ—Ä–µ–≤ —É –ª—ñ—Å—ñ
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '5'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
- –¢—Ä–∏ –∑–º—ñ–Ω–Ω—ñ –Ω–∞ –ø–æ–¥—ñ–ª
- 100 –¥–µ—Ä–µ–≤ —É –ª—ñ—Å—ñ
- –ü—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –Ω–∞ –ø–æ–¥—ñ–ª
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '6'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
- –¢—Ä–∏ –∑–º—ñ–Ω–Ω—ñ –Ω–∞ –ø–æ–¥—ñ–ª
- 100 –¥–µ—Ä–µ–≤ —É –ª—ñ—Å—ñ
- –ü—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –Ω–∞ –ø–æ–¥—ñ–ª
- –î–≤–∏–∂–æ–∫ `ranger`
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '8'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

## Random forests –≤ R

–ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ—Å—É –≤ R –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `tidymodels`...

:::: {.columns}

::: {.column}
... —ñ `ranger`

- –¢–∏–ø: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
- –¢—Ä–∏ –∑–º—ñ–Ω–Ω—ñ –Ω–∞ –ø–æ–¥—ñ–ª
- 100 –¥–µ—Ä–µ–≤ —É –ª—ñ—Å—ñ
- –ü—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–ø–æ—Å—Ç–µ—Ä–µ–∂. –Ω–∞ –ø–æ–¥—ñ–ª
- –î–≤–∏–∂–æ–∫ `ranger`
- –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è [–ø—Ä–∞–≤–∏–ª–æ –ø–æ–¥—ñ–ª—É](https://dials.tidymodels.org/reference/ranger_parameters.html)
:::

::: {.column}
```{r, eval = F}
#| code-line-numbers: '9'
# Define the random forest
heart_rf = rand_forest(
  mode = "classification",
  mtry = 3,
  trees = 100,
  min_n = 2
) %>% set_engine(
  engine = "ranger",
  splitrule = "gini"
)
```
:::

::::

---

**–ö—Ä–æ–∫ 1:** –í–∏–∑–Ω–∞—á—Ç–µ –Ω–∞—à—É —Å—ñ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤

```{r, rf-param, cache = T}
# Define the parameter grid
rf_grid = expand_grid(
  mtry = 1:13,
  min_n = 1:15
)
```

---

**–ö—Ä–æ–∫ 2:** –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –æ—Ü—ñ–Ω—é—î RF, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ [**–∑–∞–¥–∞–Ω—ñ –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏**]{.orange}.

```{r, rf-fun, cache = T}
#| code-line-numbers: '6,8'

# Function: One set of hyperparam
rf_i = function(i) {
  # Define the random forest
  heart_rf_i = rand_forest(
    mode = "classification", 
    mtry = rf_grid[i, 1],
    trees = 100,
    min_n = rf_grid[i, 2]
  ) %>% set_engine(engine = "ranger", splitrule = "gini")
  # Define workflow
  heart_rf_wf_i = 
    workflow() %>% add_model(heart_rf_i) %>% add_recipe(heart_recipe)
  # Fit
  heart_rf_fit_i = heart_rf_wf_i %>% fit(heart_df)
  # Return DF w/ OOB error and the hyperparameters
  return(tibble(
    mtry = rf_grid$mtry[i],
    min_n = rf_grid$min_n[i],
    # Note: OOB error is buried
    error_oob = heart_rf_fit_i$fit$fit$fit$prediction.error
  ))
}
```

---

**–ö—Ä–æ–∫ 3:** –û—Ü—ñ–Ω—ñ—Ç—å RF (`parallel`)!

```{r, rf-param-oob, cache = T, dependson = c(-2, -1)}
# Fit the RFs on the grid
rf_tuning = future_map_dfr(
  1:nrow(rf_grid),
  rf_i
)
```

---

**–¢–æ—á–Ω—ñ—Å—Ç—å** (OOB) –ø–æ —Å—ñ—Ç—Ü—ñ –Ω–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.

```{r, plot-rf-parameters, echo = F}
ggplot(
  data = rf_tuning,
  aes(x = mtry, y = min_n, fill = 1-error_oob)
) +
geom_tile(color = "white", linewidth = 0.3) +
scale_x_continuous("Number of variables at split (m)", breaks = 1:13) +
scale_y_continuous("Min. leaf size", breaks = c(1, 5, 10, 15)) +
scale_fill_viridis_c("Accuracy", option = "magma", labels = percent) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(
  legend.position = "bottom",
  legend.key.width = unit(3, "cm"),
  panel.grid.minor = element_blank()
)
```

---

## {visibility="hidden"}

:::: {.columns}

::: {.column}
```{r, sim-forest-size, cache = T}
# Read data
heart_df = read_csv("Heart.csv") %>%
  dplyr::select(-1) %>%
  rename(HeartDisease = AHD) %>%
  clean_names()
# Impute missing values
heart_recipe = recipe(heart_disease ~ ., data = heart_df) %>% 
  step_impute_median(all_predictors() & all_numeric()) %>% 
  step_impute_mode(all_predictors() & all_nominal())
heart_df = heart_recipe %>% prep() %>% juice()
# Set the seed
set.seed(12345)
# Train the bagged trees
rf_oob = future_lapply(
  X = 2:300,
  FUN = function(n) {
    train(
      heart_disease ~ .,
      data = heart_df,
      method = "ranger",
      num.trees = n,
      trControl = trainControl(
        method = "oob"
      ),
      tuneGrid = data.frame(
        "mtry" = 2,
        "splitrule" = "gini",
        "min.node.size" = 4
      )
    )$finalModel$prediction.error %>% subtract(1, .) %>%
    data.frame(accuracy = ., n_trees = n)
  }
) %>% bind_rows()
```
:::

::: {.column}
```{r, sim-forest-size2, cache = T}
# Set seed
set.seed(6789)
# Train the bagged trees
rf_cv = future_lapply(
  X = 2:300,
  FUN = function(n) {
    train(
      heart_disease ~ .,
      data = heart_df,
      method = "ranger",
      num.trees = n,
      trControl = trainControl(
        method = "cv",
        number = 5
      ),
      tuneGrid = data.frame(
        "mtry" = 2,
        "splitrule" = "gini",
        "min.node.size" = 4
      )
    )$finalModel$prediction.error %>% subtract(1, .) %>%
    data.frame(accuracy = ., n_trees = n)
  }
) %>% bind_rows()
```
:::

::::

---

**–ê–Ω—Å–∞–º–±–ª—ñ –¥–µ—Ä–µ–≤ —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤**

```{r, plot-bag-rf, echo = F}
ggplot(
  data = bind_rows(
    bag_oob %>% mutate(type = "Bagged, OOB"),
    bag_cv %>% mutate(type = "Bagged, CV"),
    rf_oob %>% mutate(type = "Random forest, OOB"),
    rf_cv %>% mutate(type = "Random forest, CV")
  ),
  aes(x = n_trees, y = accuracy, color = type)
) +
geom_line() +
scale_y_continuous("Accuracy", labels = scales::percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_manual(
  "[Method, Estimate]",
  values = c(red_pink, purple, orange, slate)
) +
theme_minimal(base_size = 20, base_family = "Fira Sans Book") +
theme(legend.position = "right") +
coord_cartesian(ylim = c(0.60, 0.90))
```

# Boosting

## Boosting

–ü–æ–∫–∏ —â–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞—à–∏—Ö –∞–Ω—Å–∞–º–±–ª—ñ–≤ –≤–∏—Å—Ç—É–ø–∞—é—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ:
<br> –∂–æ–¥–Ω–µ –æ–∫—Ä–µ–º–µ –¥–µ—Ä–µ–≤–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞—î –ø—Ä–æ —Ä–µ—à—Ç—É –ª—ñ—Å—É.

. . .

[Boosting]{.attn} –¥–æ–∑–≤–æ–ª—è—î –¥–µ—Ä–µ–≤–∞–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É.

. . .

–ó–æ–∫—Ä–µ–º–∞, [boosting]{.attn} –Ω–∞–≤—á–∞—î —Å–≤–æ—ó –¥–µ—Ä–µ–≤–∞ *–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ* ‚Äî –∫–æ–∂–Ω–µ –Ω–æ–≤–µ –¥–µ—Ä–µ–≤–æ —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è –Ω–∞ –∑–∞–ª–∏—à–∫–∞—Ö (–ø–æ–º–∏–ª–∫–∞—Ö) —Å–≤–æ—ó—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤.

. . .

- –ú–∏ –¥–æ–¥–∞—î–º–æ –∫–æ–∂–Ω–µ –Ω–æ–≤–µ –¥–µ—Ä–µ–≤–æ –¥–æ –Ω–∞—à–æ—ó –º–æ–¥–µ–ª—ñ $\hat{f}$ (—ñ –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—à—ñ –∑–∞–ª–∏—à–∫–∏).

- –î–µ—Ä–µ–≤–∞, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–µ–≤–µ–ª–∏–∫—ñ ‚Äî –ø–æ–≤—ñ–ª—å–Ω–æ –ø–æ–∫—Ä–∞—â—É—é—Ç—å $\hat{f}$.

---

## Boosting

Boosting –º–∞—î —Ç—Ä–∏ [tuning –ø–∞—Ä–∞–º–µ—Ç—Ä–∏]{.hi}.

1. [–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤]{.hi} $\color{#e64173}{B}$ –º–æ–∂–µ –±—É—Ç–∏ –≤–∞–∂–ª–∏–≤–∏–º –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è overfitting

. . .

2.[–ü–∞—Ä–∞–º–µ—Ç—Ä –∑—Ç–∏—Å–Ω–µ–Ω–Ω—è]{.hi} $\color{#e64173}{\lambda}$, —è–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—é—î *—à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è* –±—É—Å—Ç—ñ–Ω–≥—É (—á–∞—Å—Ç–æ 0,01 –∞–±–æ 0,001).

. . .

3. [–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–ª—ñ–≤]{.hi} $\color{#e64173}{d}$ —É –∫–æ–∂–Ω–æ–º—É –¥–µ—Ä–µ–≤—ñ (—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–µ—Ä–µ–≤).

. . .

   - –û–∫—Ä–µ–º—ñ –¥–µ—Ä–µ–≤–∞, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ä–æ—Ç–∫—ñ ‚Äî —á–∞—Å—Ç–æ $d=1$ (¬´–ø–Ω—ñ¬ª).

   - [–ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ]{.note} –î–µ—Ä–µ–≤–∞ –≤—á–∞—Ç—å—Å—è –Ω–∞ –ø–æ–º–∏–ª–∫–∞—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫—ñ–≤,<br>—Ç–æ–º—É –∂–æ–¥–Ω–µ –¥–µ—Ä–µ–≤–æ –Ω–µ –º–∞—î –±—É—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ—é –º–æ–¥–µ–ª–ª—é.

---

## How to boost

[–ö—Ä–æ–∫ 1:]{.hi-purple} –£—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å $\color{#6A5ACD}{\mathop{\hat{f}}}(x) = 0$, —â–æ –¥–∞—î –∑–∞–ª–∏—à–∫–∏ $r_i = y_i$ –¥–ª—è –≤—Å—ñ—Ö $i$.

. . .

[–ö—Ä–æ–∫ 2:]{.hi-pink} –î–ª—è $\color{#e64173}{b} = 1,\,2\,\ldots,\, B$ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:

[**A.** –ü—ñ–¥–±–µ—Ä—ñ—Ç—å –¥–µ—Ä–µ–≤–æ $\color{#e64173}{\hat{f^b}}$ —ñ–∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º $d$.]{.move-right}

. . .

[**B.** –û–Ω–æ–≤–∏—Ç–∏ –º–æ–¥–µ–ª—å $\color{#6A5ACD}{\hat{f}}$ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ¬´—Å–∫–æ—Ä–æ—á–µ–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó¬ª –Ω–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ $\color{#e64173}{\hat{f^b}}$]{.move-right}

$$
\begin{align}
  \color{#6A5ACD}{\mathop{\hat{f}}}(x) \leftarrow \color{#6A5ACD}{\mathop{\hat{f}}}(x) + \lambda \mathop{\color{#e64173}{\hat{f^b}}}(x)
\end{align}
$$

. . .

[**C.** –û–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–∏—à–∫–∏: $r_i \leftarrow r_i - \lambda \mathop{\color{#e64173}{\hat{f^b}}}(x)$.]{.move-right}

. . .

[–ö—Ä–æ–∫ 3:]{.hi-orange} –í–∏–≤–µ–¥—ñ—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω—É –º–æ–¥–µ–ª—å:
$\mathop{\color{#6A5ACD}{\hat{f}}}(x) = \sum_{b} \lambda \mathop{\color{#e64173}{\hat{f^b}}}(x)$.

---

**Boosted residuals: —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è**

[–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:]{.note} Boosting trains
- [–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ]{.pink} $\color{#e64173}{\hat{f_{i}}}(y,x)$
- –Ω–∞ [–∑–∞–ª–∏—à–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –º–æ–¥–µ–ª–µ–π]{.orange}, $\color{#FFA500}{r_{i-1}}$ (—Å—Ç–∏—Å–Ω—É—Ç—ñ –Ω–∞ $\color{#6A5ACD}{\lambda}$)

$$
\begin{align}
  \color{#FFA500}{r_0} &= y \\[1em]
  \color{#FFA500}{r_1} &= \color{#FFA500}{r_0} - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{1}}}(\color{#FFA500}{r_0}, x) \\[0.35em]
  &= y - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{1}}}(y, x) \\[1em]
  \color{#FFA500}{r_2} &= \color{#FFA500}{r_1} - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{2}}}(\color{#FFA500}{r_1}, x) \\[0.35em]
  &= y - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{1}}}(y, x) - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{2}}}(y - \color{#6A5ACD}{\lambda} \color{#e64173}{\hat{f_{1}}}(y, x), x) \\[1em]
  &\cdots
\end{align}
$$

---

## Boosting in R

–ú–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `boost_tree()` –∑ `parsnips` –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è boosting –¥–µ—Ä–µ–≤[^33].

[^33]: –¶–µ–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞–∫–µ—Ç `xgboost`.

`boost_tree()` –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—ñ –≤–∏ –±–∞—á–∏–ª–∏, –ø–ª—é—Å —â–µ –æ–¥–∏–Ω:

1. `mtry` –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–∑–±–∏—Ç—Ç—è
2. `–¥–µ—Ä–µ–≤–∞`, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤ $(B)$
3. `min_n`, –º—ñ–Ω—ñ–º—É–º —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω—å –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
4. `tree_depth`, –º–∞–∫—Å. –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
5. `learn_rate`, —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è $(\lambda)$

---

## {visibility="hidden"}

:::: {.columns}

::: {.column}
```{r, ex-boost, cache = T, message = F}
# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(1, 300, by = 1),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column}
```{r, ex-boost-new, cache = T, message = F}
# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(1, 1e4, by = 1),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '7'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '9,10'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
- –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑ OOB)
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '13'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
- –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑ OOB)
- CV-–ø–æ—à—É–∫ –ø–æ—à—É–∫ –ø–æ —Å—ñ—Ç—Ü—ñ
  - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '14'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
- –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑ OOB)
- CV-–ø–æ—à—É–∫ –ø–æ—à—É–∫ –ø–æ —Å—ñ—Ç—Ü—ñ
  - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤
  - –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '15'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001), #<<
    "n.minobsinnode" = 5
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
- –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑ OOB)
- CV-–ø–æ—à—É–∫ –ø–æ—à—É–∫ –ø–æ —Å—ñ—Ç—Ü—ñ
  - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤
  - –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
  - —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è
:::

::::

---

## Boosting in R

:::: {.columns}

::: {.column width="40%"}
```{r, eval = F}
#| code-line-numbers: '16'

# Set the seed
set.seed(12345)
# Train the random forest
heart_boost = train(
  heart_disease ~ .,
  data = heart_df,
  method = "gbm",
  trControl = trainControl(
    method = "cv",
    number = 5
  ),
  tuneGrid = expand.grid(
    "n.trees" = seq(25, 200, by = 25),
    "interaction.depth" = 1:3,
    "shrinkage" = c(0.1, 0.01, 0.001),
    "n.minobsinnode" = 5 #<<
  )
)
```
:::

::: {.column width="60%"}
- boosted –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞–∫–µ—Ç—É `gbm`
- –ø–µ—Ä–µ—Ö—Ä–µ—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–±–µ–∑ OOB)
- CV-–ø–æ—à—É–∫ –ø–æ—à—É–∫ –ø–æ —Å—ñ—Ç—Ü—ñ
  - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤
  - –≥–ª–∏–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞
  - —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è
  - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ª–∏—Å—Ç–∫–∞
:::

::::

---

**–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è boosting –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤** ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è

```{r, plot-boost-param, echo = F}
ggplot(
  data = heart_boost$results %>% filter(n.trees <= 300) %>% mutate(grp = paste(shrinkage, interaction.depth, sep = ", ")),
  aes(
    x = n.trees,
    y = Accuracy,
    color = as.character(interaction.depth),
    linetype = as.character(shrinkage)
  )
) +
geom_vline(xintercept = 204, size = 1.3, alpha = 0.3, color = red_pink) +
geom_line(size = 0.4) +
scale_y_continuous("Accuracy", labels = percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_viridis_d("Tree depth", option = "magma", end = 0.85) +
scale_linetype_manual("Shrinkage", values = c("longdash", "dotted", "solid")) +
theme_minimal(base_size = 18, base_family = "Fira Sans Book")
```

---

**–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è boosting –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤** ‚Äî –±—ñ–ª—å—à–µ –¥–µ—Ä–µ–≤

```{r, plot-boost-param-more, echo = F}
ggplot(
  data = heart_boost$results %>% mutate(grp = paste(shrinkage, interaction.depth, sep = ", ")) %>% filter(n.trees <= 1e3) %>% filter(n.trees %in% seq(1, 1e4, by = 5)),
  aes(
    x = n.trees,
    y = Accuracy,
    color = as.character(interaction.depth),
    linetype = as.character(shrinkage)
  )
) +
geom_vline(xintercept = 204, size = 1.3, alpha = 0.15, color = red_pink) +
geom_vline(xintercept = 606, size = 1.3, alpha = 0.3, color = red_pink) +
geom_line(size = 0.4) +
scale_y_continuous("Accuracy", labels = percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_viridis_d("Tree depth", option = "magma", end = 0.85) +
scale_linetype_manual("Shrinkage", values = c("longdash", "dotted", "solid")) +
theme_minimal(base_size = 18, base_family = "Fira Sans Book")
```

---

**–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è boosting –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤** ‚Äî —â–µ –±—ñ–ª—å—à–µ –¥–µ—Ä–µ–≤

```{r, plot-boost-param-even-more, echo = F}
ggplot(
  data = heart_boost$results %>% mutate(grp = paste(shrinkage, interaction.depth, sep = ", ")) %>% filter(n.trees %in% seq(1, 1e4, by = 15) | n.trees == 606) %>% filter(n.trees < 5e3),
  aes(
    x = n.trees,
    y = Accuracy,
    color = as.character(interaction.depth),
    linetype = as.character(shrinkage)
  )
) +
geom_vline(xintercept = 204, size = 1.3, alpha = 0.15, color = red_pink) +
geom_vline(xintercept = 606, size = 1.3, alpha = 0.3, color = red_pink) +
geom_line(size = 0.4) +
scale_y_continuous("Accuracy", labels = percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_viridis_d("Tree depth", option = "magma", end = 0.85) +
scale_linetype_manual("Shrinkage", values = c("longdash", "dotted", "solid")) +
theme_minimal(base_size = 18, base_family = "Fira Sans Book")
```

---

**–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è boosting –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤** ‚Äî —ñ —â–µ –±—ñ–ª—å—à–µ –¥–µ—Ä–µ–≤

```{r, plot-boost-param-and-even-more, echo = F}
ggplot(
  data = heart_boost$results %>% mutate(grp = paste(shrinkage, interaction.depth, sep = ", ")) %>% filter(n.trees %in% seq(1, 1e4, by = 25) | n.trees == 606),
  aes(
    x = n.trees,
    y = Accuracy,
    color = as.character(interaction.depth),
    linetype = as.character(shrinkage)
  )
) +
geom_vline(xintercept = 204, size = 1.3, alpha = 0.15, color = red_pink) +
geom_vline(xintercept = 606, size = 1.3, alpha = 0.3, color = red_pink) +
geom_line(size = 0.4) +
scale_y_continuous("Accuracy", labels = percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_viridis_d("Tree depth", option = "magma", end = 0.85) +
scale_linetype_manual("Shrinkage", values = c("longdash", "dotted", "solid")) +
theme_minimal(base_size = 18, base_family = "Fira Sans Book")
```

---

**–ê–Ω—Å–∞–º–±–ª—ñ –¥–µ—Ä–µ–≤ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Ä–µ–≤**

```{r, plot-bag-rf-boost, echo = F}
ggplot(
  data = bind_rows(
    bag_oob %>% mutate(type = "Bagged, OOB"),
    bag_cv %>% mutate(type = "Bagged, CV"),
    rf_oob %>% mutate(type = "RF, OOB"),
    rf_cv %>% mutate(type = "RF, CV"),
    heart_boost$results %>% filter(
      shrinkage == 0.1 &
      interaction.depth == 1 &
      between(n.trees, 2, 300)
    ) %>% transmute(accuracy = Accuracy, n_trees = n.trees, type = "Boosted, CV")
  ),
  aes(x = n_trees, y = accuracy, color = type, size = type)
) +
geom_line() +
scale_y_continuous("Accuracy", labels = scales::percent) +
scale_x_continuous("Number of trees", labels = scales::comma) +
scale_color_manual(
  "[Method, Estimate]",
  values = c(red_pink, purple, turquoise, orange, slate)
) +
scale_size_manual(
  "[Method, Estimate]",
  values = c(0.25, 0.25, 0.7, 0.25, 0.25)
) +
theme_minimal(base_size = 18, base_family = "Fira Sans Book") +
theme(legend.position = "right") +
coord_cartesian(ylim = c(0.60, 0.90))
```

---

<br>
<br>
<br>
<br>
<br>
–ó–≤–∏—á–∞–π–Ω–æ, —î –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–µ—Ä–µ–≤:

- [CatBoost](https://catboost.ai) ([R](https://catboost.ai/en/docs/concepts/r-installation))

- [LightGBM](https://lightgbm.readthedocs.io/en/latest/) ([R](https://lightgbm.readthedocs.io/en/latest/R/index.html))

- [TabNet](https://arxiv.org/abs/1908.07442) ([R](https://github.com/mlverse/tabnet/))



# –î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É! {.unnumbered .unlisted}

<br>
<br>

`r fa("telegram")` [Data Mirosh](https://t.me/araprof)

`r fa("github")` [\@aranaur](https://github.com/Aranaur)

`r fa("envelope")` ihor.miroshnychenko\@kneu.ua

`r fa("linkedin")` [\@ihormiroshnychenko](https://www.linkedin.com/in/ihormiroshnychenko/)

`r fa("house")` [aranaur.rbind.io](https://aranaur.rbind.io)
